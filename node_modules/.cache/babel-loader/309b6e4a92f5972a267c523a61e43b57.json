{"ast":null,"code":"var _jsxFileName = \"E:\\\\WEBDEV\\\\01-starting-project\\\\src\\\\components\\\\Counter.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from \"react\";\nimport classes from './Counter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  const amountRef = useRef(0);\n  const [showVal, setshowVal] = useState(0);\n  const [showcounter, setshowcounter] = useState(true); // receive the state from react redux, and return the part of the state we want to extract\n  // by doing this redux will automatically set up a subscription to the redux store for this component\n  // your component will be updated and will receive the latest counter automatically whenever that data changes in the redux store\n  // if this for some reason would be unmounted from the DOM, redux will automatically clear the subscription for you\n\n  const counter = useSelector(state => state.counter);\n  const dispatch = useDispatch();\n\n  const toggleCounterHandler = () => {\n    return;\n  };\n\n  const increaseHandler = () => {\n    // with extra payload\n    dispatch({\n      type: 'increase',\n      amount: amountRef\n    });\n  };\n\n  const incrementHandler = () => {\n    dispatch({\n      type: 'increment'\n    });\n  };\n\n  const decrementHandler = () => {\n    dispatch({\n      type: 'decrement'\n    });\n  };\n\n  const changeValueHandler = () => {\n    setshowVal(amountRef);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: [\" \", counter, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), showcounter && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: [\" amount increased by \", showVal]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: changeValueHandler,\n        type: \"number\",\n        name: \"\",\n        ref: amountRef,\n        value: amountRef,\n        id: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setshowcounter(prev => !prev),\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Counter, \"dSvGC2zPEEVOCECBbgt7MO8OUCw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/components/Counter.js"],"names":["useRef","useEffect","useState","classes","useSelector","useDispatch","Counter","amountRef","showVal","setshowVal","showcounter","setshowcounter","counter","state","dispatch","toggleCounterHandler","increaseHandler","type","amount","incrementHandler","decrementHandler","changeValueHandler","value","prev"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,SAAS,GAAGP,MAAM,CAAC,CAAD,CAAxB;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,IAAD,CAA9C,CAHoB,CAKpB;AACA;AACA;AACA;;AACA,QAAMU,OAAO,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACD,OAAhB,CAA3B;AACA,QAAME,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,oBAAoB,GAAG,MAAM;AACjC;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC5B;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,MAAM,EAAEX;AAA5B,KAAD,CAAR;AACD,GAHD;;AAIA,QAAMY,gBAAgB,GAAG,MAAM;AAC7BL,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAG;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMG,gBAAgB,GAAG,MAAM;AAC7BN,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAG;AAAR,KAAD,CAAR;AAED,GAHD;;AAIA,QAAMI,kBAAkB,GAAG,MAAM;AAC/BZ,IAAAA,UAAU,CAACF,SAAD,CAAV;AACD,GAFD;;AAIA,sBACE;AAAM,IAAA,SAAS,EAAEJ,OAAO,CAACS,OAAzB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAET,OAAO,CAACmB,KAAxB;AAAA,sBAAiCV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAIIF,WAAW,iBACb;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAES,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEH,eAAjB;AAAA,4CAAwDR,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGI;AAAO,QAAA,OAAO,EAAEa,kBAAhB;AAAmC,QAAA,IAAI,EAAC,QAAxC;AAAiD,QAAA,IAAI,EAAC,EAAtD;AAAyD,QAAA,GAAG,EAAEd,SAA9D;AAAyE,QAAA,KAAK,EAAEA,SAAhF;AAA2F,QAAA,EAAE,EAAC;AAA9F;AAAA;AAAA;AAAA;AAAA,cAHJ,eAIE;AAAQ,QAAA,OAAO,EAAEa,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAYE;AAAQ,MAAA,OAAO,EAAET,cAAc,CAACY,IAAI,IAAI,CAACA,IAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAhDD;;GAAMjB,O;UASYF,W,EACCC,W;;;KAVbC,O;AAkDN,eAAeA,OAAf","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport classes from './Counter.module.css';\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Counter = () => {\n  const amountRef = useRef(0);\n  const [showVal, setshowVal] = useState(0);\n  const [showcounter, setshowcounter] = useState(true);\n\n  // receive the state from react redux, and return the part of the state we want to extract\n  // by doing this redux will automatically set up a subscription to the redux store for this component\n  // your component will be updated and will receive the latest counter automatically whenever that data changes in the redux store\n  // if this for some reason would be unmounted from the DOM, redux will automatically clear the subscription for you\n  const counter = useSelector(state => state.counter)\n  const dispatch = useDispatch();\n  \n  const toggleCounterHandler = () => {\n    return ;\n  };\n\n  const increaseHandler = () => {\n    // with extra payload\n    dispatch({ type: 'increase', amount: amountRef });\n  }\n  const incrementHandler = () => {\n    dispatch({type : 'increment'});\n  };\n  \n  const decrementHandler = () => {\n    dispatch({type : 'decrement'});\n    \n  };\n  const changeValueHandler = () => {\n    setshowVal(amountRef);\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}> {counter} </div>\n      {\n        showcounter &&\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}> amount increased by {showVal}</button>\n          <input onClick={changeValueHandler}type=\"number\" name=\"\" ref={amountRef} value={amountRef} id=\"\" />\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      }\n      <button onClick={setshowcounter(prev => !prev)}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}