{"ast":null,"code":"var _jsxFileName = \"E:\\\\WEBDEV\\\\01-starting-project\\\\src\\\\components\\\\Counter.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useRef } from 'react';\nimport classes from './Counter.module.css';\nimport { counterActions } from '../store/store'; // useStore = get access to the whole sotr\n// useSelector get access to a part of a state managed by the store\n// connect is used by classbased components, used as a wrapper of our component to connect the class component to the store\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  /*\n      auto sets up a subscription to the reux store for this component,\n      so the component will be updated and get the latest counter value\n      whenever that data changes in the redux store\n  \n      changes to the reux store causea automatically the cpo,ponent to be re-excecuted\n  \n      react redux also automatically clears the subscription if the component gets unmounted\n   */\n  const counter = useSelector(state => state.counter);\n  const showCounter = useSelector(state => state.showCounter);\n  const increaseByRef = useRef(null);\n  const dispatch = useDispatch();\n  console.log(\"counter: \", counter);\n  useEffect(() => {\n    console.log(\"checking counter\");\n\n    if (counter <= 0) {\n      dispatch(counterActions.resetCounter());\n    }\n  }, [counter, dispatch]);\n\n  const toggleCounterhandler = () => {\n    // distpatch actions\n    dispatch(counterActions.toggleShowCounter());\n  };\n\n  const incrementCounter = () => {\n    // here we give a empty object a type property which is used in the redux store when accessing the \"action\"\n    dispatch(counterActions.incrementCounter());\n  };\n\n  const decrementCounter = () => {\n    if (counter === 0) return;\n    dispatch(counterActions.decrementCounter());\n  };\n\n  const increaseHandler = amount => {\n    dispatch(counterActions.increaseCounter(Number(increaseByRef.current.value)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), showCounter && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: incrementCounter,\n            children: \"Increment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: decrementCounter,\n            children: \"Decrement\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: increaseByRef,\n          min: 0,\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: increaseHandler,\n          children: \"Increase by 5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterhandler,\n      children: \"Toggle counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Counter, \"9qpBjavaMFQ2uk68834IGsq3IXE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/components/Counter.js"],"names":["useDispatch","useSelector","useEffect","useRef","classes","counterActions","Counter","counter","state","showCounter","increaseByRef","dispatch","console","log","resetCounter","toggleCounterhandler","toggleShowCounter","incrementCounter","decrementCounter","increaseHandler","amount","increaseCounter","Number","current","value"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,cAAT,QAA+B,gBAA/B,C,CAEA;AACA;AACA;;;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,OAAO,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,OAAhB,CAA3B;AACA,QAAME,WAAW,GAAGR,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAA/B;AACA,QAAMC,aAAa,GAAGP,MAAM,CAAC,IAAD,CAA5B;AACA,QAAMQ,QAAQ,GAAGX,WAAW,EAA5B;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,OAAzB;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACA,QAAIN,OAAO,IAAI,CAAf,EAAkB;AAChBI,MAAAA,QAAQ,CAACN,cAAc,CAACS,YAAf,EAAD,CAAR;AACD;AACF,GALQ,EAKN,CAACP,OAAD,EAAUI,QAAV,CALM,CAAT;;AAOA,QAAMI,oBAAoB,GAAG,MAAM;AACjC;AACAJ,IAAAA,QAAQ,CAACN,cAAc,CAACW,iBAAf,EAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B;AACAN,IAAAA,QAAQ,CAACN,cAAc,CAACY,gBAAf,EAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIX,OAAO,KAAK,CAAhB,EAAmB;AACnBI,IAAAA,QAAQ,CAACN,cAAc,CAACa,gBAAf,EAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,eAAe,GAAIC,MAAD,IAAY;AAClCT,IAAAA,QAAQ,CAACN,cAAc,CAACgB,eAAf,CAA+BC,MAAM,CAACZ,aAAa,CAACa,OAAd,CAAsBC,KAAvB,CAArC,CAAD,CAAR;AACD,GAFD;;AAKE,sBACE;AAAM,IAAA,SAAS,EAAEpB,OAAO,CAACG,OAAzB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAEH,OAAO,CAACoB,KAAxB;AAAA,gBAAgCjB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFF,EAIIE,WAAW,iBACX;AAAA,8BACE;AAAA,gCACE;AAAA,iCAAM;AAAQ,YAAA,OAAO,EAAEQ,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,iCAAM;AAAQ,YAAA,OAAO,EAAEC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKI;AAAA,+BAAM;AAAO,UAAA,GAAG,EAAER,aAAZ;AAA2B,UAAA,GAAG,EAAE,CAAhC;AAAmC,UAAA,IAAI,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,+BAAM;AAAQ,UAAA,OAAO,EAAES,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAN;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA,oBALJ,eAeE;AAAQ,MAAA,OAAO,EAAEJ,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBH,CA9DD;;GAAMT,O;UAUYL,W,EACIA,W,EAEHD,W;;;KAbbM,O;AA+DN,eAAeA,OAAf","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useRef } from 'react';\nimport classes from './Counter.module.css';\nimport { counterActions } from '../store/store';\n\n// useStore = get access to the whole sotr\n// useSelector get access to a part of a state managed by the store\n// connect is used by classbased components, used as a wrapper of our component to connect the class component to the store\n\nconst Counter = () => {\n  /*\n      auto sets up a subscription to the reux store for this component,\n      so the component will be updated and get the latest counter value\n      whenever that data changes in the redux store\n  \n      changes to the reux store causea automatically the cpo,ponent to be re-excecuted\n  \n      react redux also automatically clears the subscription if the component gets unmounted\n   */\n  const counter = useSelector(state => state.counter);\n  const showCounter = useSelector(state => state.showCounter);\n  const increaseByRef = useRef(null);\n  const dispatch = useDispatch();\n  console.log(\"counter: \", counter);\n  \n  useEffect(() => {\n    console.log(\"checking counter\");\n    if (counter <= 0) {\n      dispatch(counterActions.resetCounter());\n    }\n  }, [counter, dispatch]);\n  \n  const toggleCounterhandler = () => {\n    // distpatch actions\n    dispatch(counterActions.toggleShowCounter());\n  };\n\n  const incrementCounter = () => {\n    // here we give a empty object a type property which is used in the redux store when accessing the \"action\"\n    dispatch(counterActions.incrementCounter());\n  };\n\n  const decrementCounter = () => {\n    if (counter === 0) return;\n    dispatch(counterActions.decrementCounter());\n  };\n\n  const increaseHandler = (amount) => {\n    dispatch(counterActions.increaseCounter(Number(increaseByRef.current.value )));\n  };\n\n  \n    return (\n      <main className={classes.counter}>\n        <h1>Redux counter</h1>\n        <div className={classes.value}>{counter}</div>\n        {\n          showCounter &&\n          <>\n            <div>\n              <span><button onClick={incrementCounter}>Increment</button></span>\n              <span><button onClick={decrementCounter}>Decrement</button></span>\n            </div>\n              <span><input ref={increaseByRef} min={0} type=\"number\" /></span>\n              <span><button onClick={increaseHandler}>Increase by 5</button></span>\n          </>\n        \n        }\n        <button onClick={toggleCounterhandler}>Toggle counter</button>\n      </main>\n    );\n}\nexport default Counter;"]},"metadata":{},"sourceType":"module"}