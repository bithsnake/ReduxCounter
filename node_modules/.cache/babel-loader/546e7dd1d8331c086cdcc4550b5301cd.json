{"ast":null,"code":"var _jsxFileName = \"E:\\\\WEBDEV\\\\01-starting-project\\\\src\\\\components\\\\Counter.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from \"react\";\nimport classes from './Counter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Counter = () => {\n  _s();\n\n  const amountRef = useRef(1);\n  const [showVal, setshowVal] = useState(0);\n  const [showcounter, setshowcounter] = useState(true);\n  const [inputValue, setinputValue] = useState(document.getElementsByTagName(\"input\")[0].value); // receive the state from react redux, and return the part of the state we want to extract\n  // by doing this redux will automatically set up a subscription to the redux store for this component\n  // your component will be updated and will receive the latest counter automatically whenever that data changes in the redux store\n  // if this for some reason would be unmounted from the DOM, redux will automatically clear the subscription for you\n\n  const counter = useSelector(state => state.counter);\n  const dispatch = useDispatch();\n\n  const toggleCounterHandler = () => {\n    setshowcounter(prev => !prev);\n  };\n\n  const increaseHandler = () => {\n    // with extra payload\n    dispatch({\n      type: 'increase',\n      amount: amountRef\n    });\n  };\n\n  const incrementHandler = () => {\n    dispatch({\n      type: 'increment'\n    });\n  };\n\n  const decrementHandler = () => {\n    dispatch({\n      type: 'decrement'\n    });\n  };\n\n  const changeValueHandler = event => {\n    setinputValue(() => amountRef.current.value);\n    setshowVal(() => amountRef.current.value);\n    return event.value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: [\" \", counter, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), showcounter && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: [\" amount increased by \", amountRef.current.value > 0 ? amountRef.current.value : 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: changeValueHandler,\n        value: inputValue >= 0 ? inputValue + inputValue : 0,\n        type: \"number\",\n        name: \"\",\n        ref: amountRef,\n        id: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Counter, \"QwihWU2odbm1CDp3OPHcoIT96Cs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/components/Counter.js"],"names":["useRef","useEffect","useState","classes","useSelector","useDispatch","Counter","amountRef","showVal","setshowVal","showcounter","setshowcounter","inputValue","setinputValue","document","getElementsByTagName","value","counter","state","dispatch","toggleCounterHandler","prev","increaseHandler","type","amount","incrementHandler","decrementHandler","changeValueHandler","event","current"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport classes from './Counter.module.css';\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Counter = () => {\n  const amountRef = useRef(1);\n  const [showVal, setshowVal] = useState(0);\n  const [showcounter, setshowcounter] = useState(true);\n  const [inputValue, setinputValue] = useState(document.getElementsByTagName(\"input\")[0].value);\n  // receive the state from react redux, and return the part of the state we want to extract\n  // by doing this redux will automatically set up a subscription to the redux store for this component\n  // your component will be updated and will receive the latest counter automatically whenever that data changes in the redux store\n  // if this for some reason would be unmounted from the DOM, redux will automatically clear the subscription for you\n  const counter = useSelector(state => state.counter);\n  \n  const dispatch = useDispatch();\n  \n  const toggleCounterHandler = () => {\n    setshowcounter((prev) => !prev);\n  };\n\n  const increaseHandler = () => {\n    // with extra payload\n    dispatch({ type: 'increase', amount: amountRef });\n  }\n  const incrementHandler = () => {\n    dispatch({type : 'increment'});\n  };\n  \n  const decrementHandler = () => {\n    dispatch({type : 'decrement'});\n    \n  };\n  const changeValueHandler = (event) => {\n    setinputValue(() => amountRef.current.value);\n    setshowVal(() => amountRef.current.value);\n    return event.value;\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}> {counter} </div>\n      {\n        showcounter &&\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n          <button onClick={increaseHandler}> amount increased by {amountRef.current.value > 0 ? amountRef.current.value : 0}</button>\n          <input onClick={changeValueHandler} value={inputValue >= 0 ? inputValue + inputValue : 0} type=\"number\" name=\"\" ref={amountRef} id=\"\" />\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      }\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}