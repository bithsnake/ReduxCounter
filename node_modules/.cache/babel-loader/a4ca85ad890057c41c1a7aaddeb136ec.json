{"ast":null,"code":"var _jsxFileName = \"E:\\\\WEBDEV\\\\01-starting-project\\\\src\\\\components\\\\Counter.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport classes from './Counter.module.css'; // useStore = get access to the whole sotr\n// useSelector get access to a part of a state managed by the store\n// connect is used by classbased components, used as a wrapper of our component to connect the class component to the store\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet incrementInterval = -1;\nlet decrementInterval = -1;\nlet speedUpTimer = -1;\nlet speedUpMoreTimer = -1;\nlet milliseconds = 60;\n\nconst Counter = () => {\n  _s();\n\n  /*\n      auto sets up a subscription to the reux store for this component,\n      so the component will be updated and get the latest counter value\n      whenever that data changes in the redux store\n  \n      changes to the reux store causea automatically the cpo,ponent to be re-excecuted\n  \n      react redux also automatically clears the subscription if the component gets unmounted\n   */\n  const counter = useSelector(state => state.counter);\n  const [audio] = useState(new Audio('.././audio/sndCanHit0.mp3'));\n  const dispatch = useDispatch();\n\n  const playAudio = () => {\n    const playPromise = audio.play();\n\n    if (playPromise !== undefined) {\n      playPromise.then(_ => {\n        // Automatic playback started!\n        // Show playing UI.\n        console.log(\"audio played auto\");\n      }).catch(error => {\n        // Auto-play was prevented\n        // Show paused UI.\n        console.log(\"playback prevented\");\n      });\n    }\n  };\n\n  const runIncrementInterval = () => {\n    incrementInterval = setInterval(() => {\n      dispatch({\n        type: 'increment'\n      });\n    }, milliseconds);\n  };\n\n  const runDecrementInterval = () => {\n    decrementInterval = setInterval(() => {\n      dispatch({\n        type: 'decrement'\n      });\n    }, milliseconds);\n  };\n\n  const toggleCounterhandler = () => {// distpatch actions\n  };\n\n  const incrementCounter = () => {\n    playAudio(); // here we give a empty object a type property which is used in the redux store when accessing the \"action\"\n\n    dispatch({\n      type: 'increment'\n    });\n  };\n\n  const decrementCounter = () => {\n    playAudio();\n    dispatch({\n      type: 'decrement'\n    });\n  };\n\n  const delayedIncrement = () => {\n    let runOnce = true;\n\n    if (runOnce) {\n      runIncrementInterval();\n      speedUpTimer = setTimeout(() => {\n        milliseconds = 30;\n        clearInterval(incrementInterval);\n        runIncrementInterval();\n      }, 2000);\n      speedUpMoreTimer = setTimeout(() => {\n        milliseconds = 5;\n        clearInterval(speedUpTimer);\n        clearInterval(incrementInterval);\n        runIncrementInterval();\n      }, 4000);\n    }\n  };\n\n  const delayedDecrement = () => {\n    let runOnce = true;\n\n    if (runOnce) {\n      clearInterval(decrementInterval);\n      runDecrementInterval();\n      milliseconds = 30;\n      speedUpTimer = setTimeout(() => {\n        runDecrementInterval();\n      }, 2000);\n      speedUpMoreTimer = setTimeout(() => {\n        milliseconds = 5;\n        clearInterval(speedUpTimer);\n        clearInterval(incrementInterval);\n        runIncrementInterval();\n      }, 4000);\n    }\n  };\n\n  const stopCounter = () => {\n    clearInterval(incrementInterval);\n    clearInterval(decrementInterval);\n    clearInterval(speedUpTimer);\n    clearInterval(speedUpMoreTimer);\n    milliseconds = 60;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onMouseLeave: stopCounter,\n          onMouseUp: stopCounter,\n          onMouseDown: delayedIncrement,\n          onClick: incrementCounter,\n          children: \"Increment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onMouseLeave: stopCounter,\n          onMouseUp: stopCounter,\n          onMouseDown: delayedDecrement,\n          onClick: decrementCounter,\n          children: \"Decrement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterhandler,\n      children: \"Toggle counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Counter, \"yqjvMAXmXYiI0kBo6pLnBUTwW3Q=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/components/Counter.js"],"names":["useDispatch","useSelector","useState","classes","incrementInterval","decrementInterval","speedUpTimer","speedUpMoreTimer","milliseconds","Counter","counter","state","audio","Audio","dispatch","playAudio","playPromise","play","undefined","then","_","console","log","catch","error","runIncrementInterval","setInterval","type","runDecrementInterval","toggleCounterhandler","incrementCounter","decrementCounter","delayedIncrement","runOnce","setTimeout","clearInterval","delayedDecrement","stopCounter","value"],"mappings":"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","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux'\nimport { useState } from 'react';\n\nimport classes from './Counter.module.css';\n// useStore = get access to the whole sotr\n// useSelector get access to a part of a state managed by the store\n// connect is used by classbased components, used as a wrapper of our component to connect the class component to the store\nlet incrementInterval = -1;\nlet decrementInterval = -1;\nlet speedUpTimer = -1;\nlet speedUpMoreTimer = -1;\nlet milliseconds = 60;\n\n\nconst Counter = () => {\n  /*\n      auto sets up a subscription to the reux store for this component,\n      so the component will be updated and get the latest counter value\n      whenever that data changes in the redux store\n  \n      changes to the reux store causea automatically the cpo,ponent to be re-excecuted\n  \n      react redux also automatically clears the subscription if the component gets unmounted\n   */\n  const counter = useSelector(state => state.counter);\n  const [audio] = useState(new Audio('.././audio/sndCanHit0.mp3'));\n  const dispatch = useDispatch();\n  const playAudio = () => {\n    const playPromise = audio.play();\n  \n        if (playPromise !== undefined) {\n          playPromise\n            .then(_ => {\n              // Automatic playback started!\n              // Show playing UI.\n              console.log(\"audio played auto\");\n            })\n            .catch(error => {\n              // Auto-play was prevented\n              // Show paused UI.\n              console.log(\"playback prevented\");\n            });\n        }\n  }\n\n  const runIncrementInterval = () => {\n    incrementInterval = setInterval(() => {\n      dispatch({ type: 'increment' });\n    }, milliseconds);\n  }\n  const runDecrementInterval = () => {\n    decrementInterval = setInterval(() => {\n      dispatch({ type: 'decrement' });\n    }, milliseconds);\n  }\n\n  const toggleCounterhandler = () => {\n    // distpatch actions\n  };\n\n  const incrementCounter = () => {\n    playAudio();\n    // here we give a empty object a type property which is used in the redux store when accessing the \"action\"\n    dispatch({ type: 'increment' });\n  };\n\n  const decrementCounter = () => {\n    playAudio();\n    dispatch({ type: 'decrement' });\n  };\n  const delayedIncrement = () => {\n    let runOnce = true;\n    if (runOnce) {\n      runIncrementInterval();\n      speedUpTimer = setTimeout(() => {\n        milliseconds = 30;\n        clearInterval(incrementInterval);\n        runIncrementInterval();\n      }, 2000);\n        speedUpMoreTimer = setTimeout(() => {\n        milliseconds = 5;\n        clearInterval(speedUpTimer);\n        clearInterval(incrementInterval);\n        runIncrementInterval();\n      }, 4000);\n\n    }\n  };\n  const delayedDecrement = () => {\n    let runOnce = true;\n    if (runOnce) {\n      clearInterval(decrementInterval);\n      runDecrementInterval();\n      milliseconds = 30;\n      speedUpTimer = setTimeout(() => {\n        runDecrementInterval();\n      }, 2000);\n      speedUpMoreTimer = setTimeout(() => {\n        milliseconds = 5;\n        clearInterval(speedUpTimer);\n        clearInterval(incrementInterval);\n        runIncrementInterval();\n      }, 4000);\n    }\n  };\n  const stopCounter = () => {\n    clearInterval(incrementInterval);\n    clearInterval(decrementInterval);\n    clearInterval(speedUpTimer);\n    clearInterval(speedUpMoreTimer);\n    milliseconds = 60;\n  }\n  return (\n    <main className={classes.counter}>\n      <h1>Redux counter</h1>\n      <div className={classes.value}>{counter}</div>\n      <div>\n        <span><button onMouseLeave={stopCounter} onMouseUp={stopCounter} onMouseDown={delayedIncrement} onClick={incrementCounter}>Increment</button></span>\n        <span><button onMouseLeave={stopCounter} onMouseUp={stopCounter} onMouseDown={delayedDecrement} onClick={decrementCounter}>Decrement</button></span>\n      </div>\n      <button onClick={toggleCounterhandler}>Toggle counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}