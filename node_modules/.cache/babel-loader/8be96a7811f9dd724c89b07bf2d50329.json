{"ast":null,"code":"import { createStore } from 'redux';\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    counter: 0\n  };\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    type: \"\",\n    value: 5\n  };\n\n  // the type property is set in the useDispatch function set in the components using the redux store\n  if (action.type === 'increment') {\n    return {\n      // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\n      counter: state.counter + 1\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\n      counter: state.counter + action.value\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1\n    };\n  }\n\n  if (action.type === 'reset') {\n    return {\n      counter: state.counter = 0\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/store/store.js"],"names":["createStore","counterReducer","state","counter","action","type","value","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;;AACA,MAAMC,cAAc,GAAG,YAA6D;AAAA,MAA5DC,KAA4D,uEAApD;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAoD;AAAA,MAApCC,MAAoC,uEAA3B;AAACC,IAAAA,IAAI,EAAG,EAAR;AAAYC,IAAAA,KAAK,EAAG;AAApB,GAA2B;;AAChF;AACA,MAAIF,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC7B,WAAO;AACH;AACAF,MAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgB;AAFtB,KAAP;AAIH;;AACD,MAAIC,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,WAAO;AACH;AACAF,MAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,GAAgBC,MAAM,CAACE;AAF7B,KAAP;AAIH;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC7B,WAAO;AACHF,MAAAA,OAAO,EAAGD,KAAK,CAACC,OAAN,GAAe;AADtB,KAAP;AAGH;;AACD,MAAIC,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB,WAAO;AACHF,MAAAA,OAAO,EAAGD,KAAK,CAACC,OAAN,GAAgB;AADvB,KAAP;AAGH;;AACD,SAAOD,KAAP;AACH,CAzBD;;AA2BA,MAAMK,KAAK,GAAGP,WAAW,CAACC,cAAD,CAAzB;AAGA,eAAeM,KAAf","sourcesContent":["import { createStore } from 'redux';\r\nconst counterReducer = (state = { counter: 0 }, action = {type : \"\", value : 5}) => {\r\n    // the type property is set in the useDispatch function set in the components using the redux store\r\n    if (action.type === 'increment') {\r\n        return {\r\n            // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\r\n            counter: state.counter + 1,\r\n        }\r\n    }\r\n    if (action.type === 'increase') {\r\n        return {\r\n            // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\r\n            counter: state.counter + action.value,\r\n        }\r\n    }\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter : state.counter -1,\r\n        }\r\n    }\r\n    if (action.type === 'reset') {\r\n        return {\r\n            counter : state.counter = 0,\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst store = createStore(counterReducer);\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}