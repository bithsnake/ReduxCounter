{"ast":null,"code":"import { createStore } from 'redux';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nexport const identifier = {\n  increment: 'increment',\n  decrement: 'decrement',\n  increase: 'increase',\n  reset: 'reset',\n  toggleShowCounter: 'toggleShowCounter'\n};\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    type: identifier,\n    value: 5\n  };\n\n  // the type property is set in the useDispatch function set in the components using the redux store\n  if (action.type === identifier.increment) {\n    return {\n      // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === identifier.increase) {\n    return {\n      // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\n      counter: state.counter + action.value,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === identifier.decrement) {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === identifier.reset) {\n    return {\n      counter: state.counter = 0,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === identifier.toggleShowCounter) {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/store/store.js"],"names":["createStore","initialState","counter","showCounter","identifier","increment","decrement","increase","reset","toggleShowCounter","counterReducer","state","action","type","value","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAGA,OAAO,MAAMC,UAAU,GAAG;AACtBC,EAAAA,SAAS,EAAG,WADU;AAEtBC,EAAAA,SAAS,EAAG,WAFU;AAGtBC,EAAAA,QAAQ,EAAG,UAHW;AAItBC,EAAAA,KAAK,EAAG,OAJc;AAKtBC,EAAAA,iBAAiB,EAAG;AALE,CAAnB;;AAOP,MAAMC,cAAc,GAAG,YAAmE;AAAA,MAAlEC,KAAkE,uEAA1DV,YAA0D;AAAA,MAA5CW,MAA4C,uEAAnC;AAACC,IAAAA,IAAI,EAAGT,UAAR;AAAoBU,IAAAA,KAAK,EAAG;AAA5B,GAAmC;;AACtF;AACA,MAAIF,MAAM,CAACC,IAAP,KAAgBT,UAAU,CAACC,SAA/B,EAA0C;AACtC,WAAO;AACH;AACAH,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgB,CAFtB;AAGHC,MAAAA,WAAW,EAAGQ,KAAK,CAACR;AAHjB,KAAP;AAKH;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgBT,UAAU,CAACG,QAA/B,EAAyC;AACrC,WAAO;AACH;AACAL,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgBU,MAAM,CAACE,KAF7B;AAGHX,MAAAA,WAAW,EAAGQ,KAAK,CAACR;AAHjB,KAAP;AAKH;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgBT,UAAU,CAACE,SAA/B,EAA0C;AACtC,WAAO;AACHJ,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgB,CADtB;AAEHC,MAAAA,WAAW,EAAGQ,KAAK,CAACR;AAFjB,KAAP;AAIH;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgBT,UAAU,CAACI,KAA/B,EAAsC;AAClC,WAAO;AACHN,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgB,CADtB;AAEHC,MAAAA,WAAW,EAAGQ,KAAK,CAACR;AAFjB,KAAP;AAIH;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgBT,UAAU,CAACK,iBAA/B,EAAkD;AAC9C,WAAO;AACHP,MAAAA,OAAO,EAAES,KAAK,CAACT,OADZ;AAEHC,MAAAA,WAAW,EAAG,CAACQ,KAAK,CAACR;AAFlB,KAAP;AAIH;;AACD,SAAOQ,KAAP;AACH,CAnCD;;AAqCA,MAAMI,KAAK,GAAGf,WAAW,CAACU,cAAD,CAAzB;AAGA,eAAeK,KAAf","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n\r\nexport const identifier = {\r\n    increment : 'increment',\r\n    decrement : 'decrement',\r\n    increase : 'increase',\r\n    reset : 'reset',\r\n    toggleShowCounter : 'toggleShowCounter',\r\n}\r\nconst counterReducer = (state = initialState, action = {type : identifier, value : 5}) => {\r\n    // the type property is set in the useDispatch function set in the components using the redux store\r\n    if (action.type === identifier.increment) {\r\n        return {\r\n            // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\r\n            counter: state.counter + 1,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === identifier.increase) {\r\n        return {\r\n            // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\r\n            counter: state.counter + action.value,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === identifier.decrement) {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === identifier.reset) {\r\n        return {\r\n            counter: state.counter = 0,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === identifier.toggleShowCounter) {\r\n        return {\r\n            counter: state.counter,\r\n            showCounter : !state.showCounter,\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst store = createStore(counterReducer);\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}