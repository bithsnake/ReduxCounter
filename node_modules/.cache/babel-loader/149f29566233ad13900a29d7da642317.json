{"ast":null,"code":"import { createStore } from 'redux';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    type: \"\",\n    value: 5\n  };\n\n  // the type property is set in the useDispatch function set in the components using the redux store\n  if (action.type === 'increment') {\n    return {\n      // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\n      counter: state.counter + action.value,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'reset') {\n    return {\n      counter: state.counter = 0,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggleShowCounter') {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["E:/WEBDEV/01-starting-project/src/store/store.js"],"names":["createStore","initialState","counter","showCounter","counterReducer","state","action","type","value","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;;AACA,MAAMC,cAAc,GAAG,YAA2D;AAAA,MAA1DC,KAA0D,uEAAlDJ,YAAkD;AAAA,MAApCK,MAAoC,uEAA3B;AAACC,IAAAA,IAAI,EAAG,EAAR;AAAYC,IAAAA,KAAK,EAAG;AAApB,GAA2B;;AAC9E;AACA,MAAIF,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC7B,WAAO;AACH;AACAL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB,CAFtB;AAGHC,MAAAA,WAAW,EAAGE,KAAK,CAACF;AAHjB,KAAP;AAKH;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,WAAO;AACH;AACAL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACE,KAF7B;AAGHL,MAAAA,WAAW,EAAGE,KAAK,CAACF;AAHjB,KAAP;AAKH;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC7B,WAAO;AACHL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB,CADtB;AAEHC,MAAAA,WAAW,EAAGE,KAAK,CAACF;AAFjB,KAAP;AAIH;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB,WAAO;AACHL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB,CADtB;AAEHC,MAAAA,WAAW,EAAGE,KAAK,CAACF;AAFjB,KAAP;AAIH;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,mBAApB,EAAyC;AACrC,WAAO;AACHL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OADZ;AAEHC,MAAAA,WAAW,EAAG,CAACE,KAAK,CAACF;AAFlB,KAAP;AAIH;;AACD,SAAOE,KAAP;AACH,CAnCD;;AAqCA,MAAMI,KAAK,GAAGT,WAAW,CAACI,cAAD,CAAzB;AAGA,eAAeK,KAAf","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\nconst counterReducer = (state = initialState, action = {type : \"\", value : 5}) => {\r\n    // the type property is set in the useDispatch function set in the components using the redux store\r\n    if (action.type === 'increment') {\r\n        return {\r\n            // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\r\n            counter: state.counter + 1,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === 'increase') {\r\n        return {\r\n            // because this is returned when using the useSelector, we can access the \"counter\" from the useSelector hook when we pass in a function to its parameter\r\n            counter: state.counter + action.value,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === 'reset') {\r\n        return {\r\n            counter: state.counter = 0,\r\n            showCounter : state.showCounter,\r\n        }\r\n    }\r\n    if (action.type === 'toggleShowCounter') {\r\n        return {\r\n            counter: state.counter,\r\n            showCounter : !state.showCounter,\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst store = createStore(counterReducer);\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}